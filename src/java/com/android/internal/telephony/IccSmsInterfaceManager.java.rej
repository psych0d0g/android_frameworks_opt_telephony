--- src/java/com/android/internal/telephony/IccSmsInterfaceManager.java
+++ src/java/com/android/internal/telephony/IccSmsInterfaceManager.java
@@ -17,4 +17,13 @@
 package com.android.internal.telephony;
 
+// BEGIN privacy additions
+import android.content.pm.PackageManager;
+import android.os.Binder;
+import android.os.ServiceManager;
+import android.privacy.IPrivacySettingsManager;
+import android.privacy.PrivacySettings;
+import android.privacy.PrivacySettingsManager;
+// END privacy
+
 import android.Manifest;
 import android.app.AppOpsManager;
@@ -64,4 +73,117 @@
     protected SMSDispatcher mDispatcher;
 
+    // BEGIN privacy additions
+
+    protected PrivacySettingsManager pSetMan;
+
+    protected static final String P_TAG = "PrivacySMSInterfaceManager";
+
+    protected static final int ACCESS_TYPE_SMS_MMS = 0;
+    protected static final int ACCESS_TYPE_ICC = 1;
+
+    /**
+     * Gives the actual package names which are trying to send sms
+     * {@hide}
+     * @return package name array or null
+     */
+   protected String[] getPackageName(){
+        PackageManager pm = mContext.getPackageManager();
+        String[] packageNames = pm.getPackagesForUid(Binder.getCallingUid());
+        return packageNames;
+   }
+
+    /**
+     * This method also includes notifications!
+     * @param packageNames 
+     * @param accessType use constants ACCESS_TYPE_SMS_MMS and ACCESS_TYPE_ICC
+     * @return true if package is allowed or exception was thrown or packages are empty, false if package is not allowed 
+     * {@hide}
+     */
+    protected boolean isAllowed(String[] packageNames, int accessType){
+       try{
+           switch(accessType){
+               case ACCESS_TYPE_SMS_MMS:
+                   PrivacySettings settings = null;
+                   if(pSetMan == null) pSetMan = new PrivacySettingsManager(null, IPrivacySettingsManager.Stub.asInterface(ServiceManager.getService("privacy")));
+                   if(pSetMan != null && packageNames != null){
+                       for(int i=0; i < packageNames.length; i++){
+                           settings = pSetMan.getSettings(packageNames[i], -1);
+                           if(pSetMan != null && settings != null && settings.getSmsSendSetting() != PrivacySettings.REAL){
+                               notify(accessType, packageNames[i],PrivacySettings.EMPTY);
+
+                               return false;
+                           }
+                           settings = null;
+                       }
+                       notify(accessType, packageNames[0],PrivacySettings.REAL);
+
+                       return true;
+                   }
+                   else{
+                       if(packageNames != null && packageNames.length > 0)
+                           notify(accessType, packageNames[0],PrivacySettings.REAL);
+
+                           return true;
+                   }
+               case ACCESS_TYPE_ICC:
+                   if(pSetMan == null) pSetMan = new PrivacySettingsManager(null, IPrivacySettingsManager.Stub.asInterface(ServiceManager.getService("privacy")));
+                   if(pSetMan != null && packageNames != null){
+                       for(int i=0; i < packageNames.length; i++){
+                           settings = pSetMan.getSettings(packageNames[i], -1);
+                           if(pSetMan != null && settings != null && settings.getIccAccessSetting() != PrivacySettings.REAL){
+                               notify(accessType, packageNames[i],PrivacySettings.EMPTY);
+                               return false;
+                           }
+                           settings = null;
+                       }
+                       notify(accessType, packageNames[0],PrivacySettings.REAL);
+                       return true;
+                   }
+                   else{
+                       if(packageNames != null && packageNames.length > 0)
+                           notify(accessType, packageNames[0],PrivacySettings.REAL);
+
+                       return true;
+                   }
+               default:
+                   notify(accessType, packageNames[0],PrivacySettings.REAL);
+                   return true;
+           }
+
+       }
+       catch(Exception e){
+           Log.e(P_TAG,"Got exception while checking for sms or ICC acess permission");
+           e.printStackTrace();
+           if(packageNames != null && pSetMan != null && packageNames.length > 0){
+               PrivacySettings settings = pSetMan.getSettings(packageNames[0], -1);
+               if(settings != null)
+                   notify(accessType, packageNames[0],PrivacySettings.REAL);
+           }
+           return true;
+       }
+    }
+
+    /**
+     * {@hide}
+     * Helper method for method isAllowed() to show dataAccess toasts
+     * @param accessType use ACCESS_TYPE_SMS_MMS or ACCESS_TYPE_ICC
+     * @param packageName the package name
+     * @param accessMode PrivacySettings.REAL || PrivacySettings.CUSTOM || PrivacySettings.RANDOM || PrivacySettings.EMPTY
+     */
+    protected void notify(int accessType,String packageName, byte accessMode){
+       switch(accessType){
+           case ACCESS_TYPE_SMS_MMS:
+               //Log.i("PrivacySmsManager","now send notify information outgoing sms");
+               pSetMan.notification(packageName, 0, accessMode, PrivacySettings.DATA_SMS_SEND, null, null);
+               break;
+           case ACCESS_TYPE_ICC:
+               //Log.i("PrivacySmsManager","now send notify information ICC ACCESS");
+               pSetMan.notification(packageName, 0, accessMode, PrivacySettings.DATA_ICC_ACCESS, null, null);
+               break;
+       }
+    }
+
+    // END privacy
+
     protected Handler mHandler = new Handler() {
         @Override
@@ -167,4 +289,9 @@
                 " status=" + status + " ==> " +
                 "("+ Arrays.toString(pdu) + ")");
+        // BEGIN privacy additions
+        if(!isAllowed(getPackageName(),ACCESS_TYPE_ICC)){
+        	return false;
+        }
+        // END privacy
         enforceReceiveAndSend("Updating message on Icc");
         if (mAppOps.noteOp(AppOpsManager.OP_WRITE_ICC_SMS, Binder.getCallingUid(),
@@ -218,4 +345,9 @@
                 "pdu=("+ Arrays.toString(pdu) +
                 "), smsc=(" + Arrays.toString(smsc) +")");
+        // BEGIN privacy additions
+        if(!isAllowed(getPackageName(),ACCESS_TYPE_ICC)){
+        	return false;
+        }
+        // END privacy
         enforceReceiveAndSend("Copying message to Icc");
         if (mAppOps.noteOp(AppOpsManager.OP_WRITE_ICC_SMS, Binder.getCallingUid(),
@@ -248,4 +380,10 @@
         if (DBG) log("getAllMessagesFromEF");
 
+        // BEGIN privacy
+        if(!isAllowed(getPackageName(),ACCESS_TYPE_ICC)){
+        	return new ArrayList<SmsRawData>();
+        }
+        // END privacy
+
         mContext.enforceCallingPermission(
                 Manifest.permission.RECEIVE_SMS,
