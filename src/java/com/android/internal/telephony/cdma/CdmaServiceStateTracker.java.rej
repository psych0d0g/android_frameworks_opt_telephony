--- src/java/com/android/internal/telephony/cdma/CdmaServiceStateTracker.java
+++ src/java/com/android/internal/telephony/cdma/CdmaServiceStateTracker.java
@@ -66,4 +66,13 @@
 import java.util.TimeZone;
 
+/////////////////////////////////////////////////////////
+import android.os.ServiceManager;
+import android.privacy.IPrivacySettingsManager;
+import android.privacy.PrivacySettings;
+import android.privacy.PrivacySettingsManager;
+import java.util.Random;
+/////////////////////////////////////////////////////////
+
+
 /**
  * {@hide}
@@ -120,4 +129,9 @@
     long mSavedTime;
     long mSavedAtTime;
+    
+    //-------------------------------------------------------------------------------------------------------------------------------------------------
+    private Context mContext;
+    private PrivacySettingsManager pSetMan;
+    //-------------------------------------------------------------------------------------------------------------------------------------------------
 
     /** Wake lock used while setting time of day. */
@@ -202,4 +216,9 @@
             mAutoTimeZoneObserver);
         setSignalStrengthDefaultValues();
+
+        //-------------------------------------------------------------------------------------------------------------------------------------------------
+        this.mContext = phone.getContext();
+        pSetMan = new PrivacySettingsManager(mContext, IPrivacySettingsManager.Stub.asInterface(ServiceManager.getService("privacy")));
+        //-------------------------------------------------------------------------------------------------------------------------------------------------
     }
 
@@ -371,9 +390,20 @@
                 }
 
-                mCellLoc.setCellLocationData(baseStationId, baseStationLatitude,
-                        baseStationLongitude, systemId, networkId);
-                mPhone.notifyLocationChanged();
-            }
-
+                // BEGIN privacy additions
+                PrivacySettings settings = pSetMan.getSettings(mContext.getPackageName(), 0);
+                if(pSetMan != null && settings != null && settings.getLocationNetworkSetting() == PrivacySettings.EMPTY){
+                	//we will update with invalid cell location values
+                	mCellLoc.setStateInvalid();
+                }
+                else if(pSetMan != null && settings != null && settings.getLocationNetworkSetting() == PrivacySettings.RANDOM){
+                	Random values = new Random();
+                	mCellLoc.setCellLocationData(values.nextInt(), values.nextInt(), values.nextInt(), values.nextInt(), values.nextInt());
+                }
+                else{
+                	mCellLoc.setCellLocationData(baseStationId, baseStationLatitude, baseStationLongitude, systemId, networkId);
+                }
+                 mPhone.notifyLocationChanged();
+                // END privacy
+             }
             // Release any temporary cell lock, which could have been
             // acquired to allow a single-shot location update.
@@ -560,4 +590,5 @@
         int ints[];
         String states[];
+  	PrivacySettings settings = pSetMan.getSettings(mContext.getPackageName(), 0);
         switch (what) {
             case EVENT_POLL_STATE_GPRS: {
@@ -684,6 +715,17 @@
 
                 // Values are -1 if not available.
-                mNewCellLoc.setCellLocationData(baseStationId, baseStationLatitude,
-                        baseStationLongitude, systemId, networkId);
+             // BEGIN privacy additions
+             if(pSetMan != null && settings != null && settings.getLocationNetworkSetting() == PrivacySettings.EMPTY){
+                 //we will update with invalid cell location and station values
+                 mNewCellLoc.setStateInvalid();
+             }
+             else if(pSetMan != null && settings != null && settings.getLocationNetworkSetting() == PrivacySettings.RANDOM){
+                 Random values = new Random();
+                 mNewCellLoc.setCellLocationData(values.nextInt(), values.nextInt(), values.nextInt(), values.nextInt(), values.nextInt());
+             }
+             else{
+                 mNewCellLoc.setCellLocationData(baseStationId, baseStationLatitude, baseStationLongitude, systemId, networkId);
+             }
+             //END privacy
 
                 if (reasonForDenial == 0) {
@@ -716,12 +758,23 @@
                         }
                     }
-
+                    // BEGIN privacy additions
                     if (!mIsSubscriptionFromRuim) {
                         // In CDMA in case on NV, the ss.mOperatorAlphaLong is set later with the
                         // ERI text, so here it is ignored what is coming from the modem.
-                        mNewSS.setOperatorName(null, opNames[1], opNames[2]);
+                        if(pSetMan != null && settings != null 
+                                && settings.getNetworkInfoSetting() != PrivacySettings.REAL){
+                            mNewSS.setOperatorName(null, "", "");
+                        } else {
+                            mNewSS.setOperatorName(null, opNames[1], opNames[2]);
+                        }
                     } else {
-                        mNewSS.setOperatorName(opNames[0], opNames[1], opNames[2]);
+                        if(pSetMan != null && settings != null
+                                && settings.getNetworkInfoSetting() != PrivacySettings.REAL){
+                            mNewSS.setOperatorName("", "", "");
+                        } else {
+                            mNewSS.setOperatorName(opNames[0], opNames[1], opNames[2]);
+                        }
                     }
+                    // END privacy
                 } else {
                     if (DBG) log("EVENT_POLL_STATE_OPERATOR_CDMA: error parsing opNames");
@@ -1034,11 +1087,25 @@
                 String eriText;
                 // Now the CDMAPhone sees the new ServiceState so it can get the new ERI text
-                if (mSS.getVoiceRegState() == ServiceState.STATE_IN_SERVICE) {
-                    eriText = mPhone.getCdmaEriText();
-                } else {
-                    // Note that ServiceState.STATE_OUT_OF_SERVICE is valid used for
-                    // mRegistrationState 0,2,3 and 4
-                    eriText = mPhone.getContext().getText(
-                            com.android.internal.R.string.roamingTextSearching).toString();
+                // BEGIN privacy additions
+                PrivacySettings settings = pSetMan.getSettings(mContext.getPackageName(), 0);
+                if(pSetMan != null && settings != null && settings.getNetworkInfoSetting() != PrivacySettings.REAL){
+                    if (mSS.getVoiceRegState() == ServiceState.STATE_IN_SERVICE) {
+                        eriText = "";
+                    } else {
+                        // Note that ServiceState.STATE_OUT_OF_SERVICE is valid used for
+                        // mRegistrationState 0,2,3 and 4
+                        eriText = mPhone.getContext().getText(
+                                com.android.internal.R.string.roamingTextSearching).toString();
+                    }
+                } else{
+                    //original code
+                    if (mSS.getVoiceRegState() == ServiceState.STATE_IN_SERVICE) {
+                        eriText = mPhone.getCdmaEriText();
+                    } else {
+                        // Note that ServiceState.STATE_OUT_OF_SERVICE is valid used for
+                        // mRegistrationState 0,2,3 and 4
+                        eriText = mPhone.getContext().getText(
+                                com.android.internal.R.string.roamingTextSearching).toString();
+                    }
                 }
                 mSS.setOperatorAlphaLong(eriText);
